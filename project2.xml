<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <left-data-source class="cdc.impl.datasource.text.CSVDataSource" name="br">
        <params>
            <param name="column-separator" value=","/>
            <param name="source-name" value="br"/>
            <param name="input-file" value="/Users/mirzasikander/Documents/courses/CS548-IIW/Project/code/extracted-data/br/201301010DEN.csv"/>
        </params>
        <row-model>
            <column column=" quarter"
                converter="cdc.datamodel.converters.DummyConverter" name=" quarter">
                <empty-values/>
                <params/>
            </column>
            <column column=" time"
                converter="cdc.datamodel.converters.DummyConverter" name=" time">
                <empty-values/>
                <params/>
            </column>
            <column column=" team"
                converter="cdc.datamodel.converters.DummyConverter" name=" team">
                <empty-values/>
                <params/>
            </column>
            <column column=" eventtype"
                converter="cdc.datamodel.converters.DummyConverter" name=" eventtype">
                <empty-values/>
                <params/>
            </column>
            <column column=" block"
                converter="cdc.datamodel.converters.DummyConverter" name=" block">
                <empty-values/>
                <params/>
            </column>
            <column column=" left"
                converter="cdc.datamodel.converters.DummyConverter" name=" left">
                <empty-values/>
                <params/>
            </column>
            <column column=" numfreeshot"
                converter="cdc.datamodel.converters.DummyConverter" name=" numfreeshot">
                <empty-values/>
                <params/>
            </column>
            <column column=" opponent"
                converter="cdc.datamodel.converters.DummyConverter" name=" opponent">
                <empty-values/>
                <params/>
            </column>
            <column column=" outof"
                converter="cdc.datamodel.converters.DummyConverter" name=" outof">
                <empty-values/>
                <params/>
            </column>
            <column column=" points"
                converter="cdc.datamodel.converters.DummyConverter" name=" points">
                <empty-values/>
                <params/>
            </column>
            <column column=" possession"
                converter="cdc.datamodel.converters.DummyConverter" name=" possession">
                <empty-values/>
                <params/>
            </column>
            <column column=" reason"
                converter="cdc.datamodel.converters.DummyConverter" name=" reason">
                <empty-values/>
                <params/>
            </column>
            <column column=" result"
                converter="cdc.datamodel.converters.DummyConverter" name=" result">
                <empty-values/>
                <params/>
            </column>
            <column column=" steal"
                converter="cdc.datamodel.converters.DummyConverter" name=" steal">
                <empty-values/>
                <params/>
            </column>
            <column column=" type"
                converter="cdc.datamodel.converters.DummyConverter" name=" type">
                <empty-values/>
                <params/>
            </column>
            <column column=" x"
                converter="cdc.datamodel.converters.DummyConverter" name=" x">
                <empty-values/>
                <params/>
            </column>
            <column column=" y"
                converter="cdc.datamodel.converters.DummyConverter" name=" y">
                <empty-values/>
                <params/>
            </column>
            <column column=" score"
                converter="cdc.datamodel.converters.DummyConverter" name=" score">
                <empty-values/>
                <params/>
            </column>
            <column column=" shotdistance"
                converter="cdc.datamodel.converters.DummyConverter" name=" shotdistance">
                <empty-values/>
                <params/>
            </column>
            <column column=" assist"
                converter="cdc.datamodel.converters.SplitConverter" name="assist_first,assist_last">
                <empty-values/>
                <params>
                    <param name="col-name" value="assist_first,assist_last"/>
                    <param name="split" value=" "/>
                    <param name="script" value="//This script has the following input parameters:&#xa;//   column - string value of the column that is being split&#xa;//   splitStr - string used for splitting&#xa;//   outSize - expected number of strings in output array&#xa;//This script is expected to return array of strings of length outSize&#xa;&#xa;//Split input&#xa;String[] strArray = column.split(splitStr);&#xa;&#xa;//Create output array&#xa;String[] out = new String[outSize];&#xa;&#xa;//Fill in the out array&#xa;for (int i = 0; i &lt; outSize; i++) {&#xa;   if (strArray.length > i) {&#xa;       out[i] = strArray[i];&#xa;   } else {&#xa;       out[i] = &quot;&quot;;&#xa;   }&#xa;}&#xa;&#xa;//Append reminder items&#xa;if (outSize &lt; strArray.length) { &#xa;   for (int i = outSize; i &lt; strArray.length; i++) {&#xa;       out[outSize - 1] = out[outSize - 1] + splitStr + strArray[i];&#xa;   }&#xa;}&#xa;&#xa;return out;&#xa;"/>
                </params>
            </column>
            <column column=" awayjumpball"
                converter="cdc.datamodel.converters.SplitConverter" name="awayjumpball_first,awayjumpball_last">
                <empty-values/>
                <params>
                    <param name="col-name" value="awayjumpball_first,awayjumpball_last"/>
                    <param name="split" value=" "/>
                    <param name="script" value="//This script has the following input parameters:&#xa;//   column - string value of the column that is being split&#xa;//   splitStr - string used for splitting&#xa;//   outSize - expected number of strings in output array&#xa;//This script is expected to return array of strings of length outSize&#xa;&#xa;//Split input&#xa;String[] strArray = column.split(splitStr);&#xa;&#xa;//Create output array&#xa;String[] out = new String[outSize];&#xa;&#xa;//Fill in the out array&#xa;for (int i = 0; i &lt; outSize; i++) {&#xa;   if (strArray.length > i) {&#xa;       out[i] = strArray[i];&#xa;   } else {&#xa;       out[i] = &quot;&quot;;&#xa;   }&#xa;}&#xa;&#xa;//Append reminder items&#xa;if (outSize &lt; strArray.length) { &#xa;   for (int i = outSize; i &lt; strArray.length; i++) {&#xa;       out[outSize - 1] = out[outSize - 1] + splitStr + strArray[i];&#xa;   }&#xa;}&#xa;&#xa;return out;&#xa;"/>
                </params>
            </column>
            <column column=" homejumpball"
                converter="cdc.datamodel.converters.SplitConverter" name="homejumpball_first,homejumpball_last">
                <empty-values/>
                <params>
                    <param name="col-name" value="homejumpball_first,homejumpball_last"/>
                    <param name="split" value=" "/>
                    <param name="script" value="//This script has the following input parameters:&#xa;//   column - string value of the column that is being split&#xa;//   splitStr - string used for splitting&#xa;//   outSize - expected number of strings in output array&#xa;//This script is expected to return array of strings of length outSize&#xa;&#xa;//Split input&#xa;String[] strArray = column.split(splitStr);&#xa;&#xa;//Create output array&#xa;String[] out = new String[outSize];&#xa;&#xa;//Fill in the out array&#xa;for (int i = 0; i &lt; outSize; i++) {&#xa;   if (strArray.length > i) {&#xa;       out[i] = strArray[i];&#xa;   } else {&#xa;       out[i] = &quot;&quot;;&#xa;   }&#xa;}&#xa;&#xa;//Append reminder items&#xa;if (outSize &lt; strArray.length) { &#xa;   for (int i = outSize; i &lt; strArray.length; i++) {&#xa;       out[outSize - 1] = out[outSize - 1] + splitStr + strArray[i];&#xa;   }&#xa;}&#xa;&#xa;return out;&#xa;"/>
                </params>
            </column>
            <column column=" entered"
                converter="cdc.datamodel.converters.SplitConverter" name="entered_first,entered_last">
                <empty-values/>
                <params>
                    <param name="col-name" value="entered_first,entered_last"/>
                    <param name="split" value=" "/>
                    <param name="script" value="//This script has the following input parameters:&#xa;//   column - string value of the column that is being split&#xa;//   splitStr - string used for splitting&#xa;//   outSize - expected number of strings in output array&#xa;//This script is expected to return array of strings of length outSize&#xa;&#xa;//Split input&#xa;String[] strArray = column.split(splitStr);&#xa;&#xa;//Create output array&#xa;String[] out = new String[outSize];&#xa;&#xa;//Fill in the out array&#xa;for (int i = 0; i &lt; outSize; i++) {&#xa;   if (strArray.length > i) {&#xa;       out[i] = strArray[i];&#xa;   } else {&#xa;       out[i] = &quot;&quot;;&#xa;   }&#xa;}&#xa;&#xa;//Append reminder items&#xa;if (outSize &lt; strArray.length) { &#xa;   for (int i = outSize; i &lt; strArray.length; i++) {&#xa;       out[outSize - 1] = out[outSize - 1] + splitStr + strArray[i];&#xa;   }&#xa;}&#xa;&#xa;return out;&#xa;"/>
                </params>
            </column>
            <column column=" left"
                converter="cdc.datamodel.converters.SplitConverter" name="left_0,left_1">
                <empty-values/>
                <params>
                    <param name="col-name" value="left_0,left_1"/>
                    <param name="split" value=" "/>
                    <param name="script" value="//This script has the following input parameters:&#xa;//   column - string value of the column that is being split&#xa;//   splitStr - string used for splitting&#xa;//   outSize - expected number of strings in output array&#xa;//This script is expected to return array of strings of length outSize&#xa;&#xa;//Split input&#xa;String[] strArray = column.split(splitStr);&#xa;&#xa;//Create output array&#xa;String[] out = new String[outSize];&#xa;&#xa;//Fill in the out array&#xa;for (int i = 0; i &lt; outSize; i++) {&#xa;   if (strArray.length > i) {&#xa;       out[i] = strArray[i];&#xa;   } else {&#xa;       out[i] = &quot;&quot;;&#xa;   }&#xa;}&#xa;&#xa;//Append reminder items&#xa;if (outSize &lt; strArray.length) { &#xa;   for (int i = outSize; i &lt; strArray.length; i++) {&#xa;       out[outSize - 1] = out[outSize - 1] + splitStr + strArray[i];&#xa;   }&#xa;}&#xa;&#xa;return out;&#xa;"/>
                </params>
            </column>
            <column column=" player"
                converter="cdc.datamodel.converters.SplitConverter" name="player_first,player_last">
                <empty-values/>
                <params>
                    <param name="col-name" value="player_first,player_last"/>
                    <param name="split" value=" "/>
                    <param name="script" value="//This script has the following input parameters:&#xa;//   column - string value of the column that is being split&#xa;//   splitStr - string used for splitting&#xa;//   outSize - expected number of strings in output array&#xa;//This script is expected to return array of strings of length outSize&#xa;&#xa;//Split input&#xa;String[] strArray = column.split(splitStr);&#xa;&#xa;//Create output array&#xa;String[] out = new String[outSize];&#xa;&#xa;//Fill in the out array&#xa;for (int i = 0; i &lt; outSize; i++) {&#xa;   if (strArray.length > i) {&#xa;       out[i] = strArray[i];&#xa;   } else {&#xa;       out[i] = &quot;&quot;;&#xa;   }&#xa;}&#xa;&#xa;//Append reminder items&#xa;if (outSize &lt; strArray.length) { &#xa;   for (int i = outSize; i &lt; strArray.length; i++) {&#xa;       out[outSize - 1] = out[outSize - 1] + splitStr + strArray[i];&#xa;   }&#xa;}&#xa;&#xa;return out;&#xa;"/>
                </params>
            </column>
        </row-model>
    </left-data-source>
    <right-data-source class="cdc.impl.datasource.text.CSVDataSource" name="NBA">
        <params>
            <param name="column-separator" value=","/>
            <param name="source-name" value="NBA"/>
            <param name="input-file" value="/Users/mirzasikander/Documents/courses/CS548-IIW/Project/code/extracted-data/nba/nba-20130101DEN-ex.csv"/>
        </params>
        <row-model>
            <column column=" quarter"
                converter="cdc.datamodel.converters.DummyConverter" name=" quarter">
                <empty-values/>
                <params/>
            </column>
            <column column=" time"
                converter="cdc.datamodel.converters.DummyConverter" name=" time">
                <empty-values/>
                <params/>
            </column>
            <column column=" team"
                converter="cdc.datamodel.converters.DummyConverter" name=" team">
                <empty-values/>
                <params/>
            </column>
            <column column=" eventtype"
                converter="cdc.datamodel.converters.DummyConverter" name=" eventtype">
                <empty-values/>
                <params/>
            </column>
            <column column=" assist"
                converter="cdc.datamodel.converters.DummyConverter" name=" assist">
                <empty-values/>
                <params/>
            </column>
            <column column=" awayjumpball"
                converter="cdc.datamodel.converters.DummyConverter" name=" awayjumpball">
                <empty-values/>
                <params/>
            </column>
            <column column=" block"
                converter="cdc.datamodel.converters.DummyConverter" name=" block">
                <empty-values/>
                <params/>
            </column>
            <column column=" entered"
                converter="cdc.datamodel.converters.DummyConverter" name=" entered">
                <empty-values/>
                <params/>
            </column>
            <column column=" homejumpball"
                converter="cdc.datamodel.converters.DummyConverter" name=" homejumpball">
                <empty-values/>
                <params/>
            </column>
            <column column=" left"
                converter="cdc.datamodel.converters.DummyConverter" name=" left">
                <empty-values/>
                <params/>
            </column>
            <column column=" numfreeshot"
                converter="cdc.datamodel.converters.DummyConverter" name=" numfreeshot">
                <empty-values/>
                <params/>
            </column>
            <column column=" opponent"
                converter="cdc.datamodel.converters.DummyConverter" name=" opponent">
                <empty-values/>
                <params/>
            </column>
            <column column=" outof"
                converter="cdc.datamodel.converters.DummyConverter" name=" outof">
                <empty-values/>
                <params/>
            </column>
            <column column=" player"
                converter="cdc.datamodel.converters.DummyConverter" name=" player">
                <empty-values/>
                <params/>
            </column>
            <column column=" points"
                converter="cdc.datamodel.converters.DummyConverter" name=" points">
                <empty-values/>
                <params/>
            </column>
            <column column=" possession"
                converter="cdc.datamodel.converters.DummyConverter" name=" possession">
                <empty-values/>
                <params/>
            </column>
            <column column=" reason"
                converter="cdc.datamodel.converters.DummyConverter" name=" reason">
                <empty-values/>
                <params/>
            </column>
            <column column=" result"
                converter="cdc.datamodel.converters.DummyConverter" name=" result">
                <empty-values/>
                <params/>
            </column>
            <column column=" steal"
                converter="cdc.datamodel.converters.DummyConverter" name=" steal">
                <empty-values/>
                <params/>
            </column>
            <column column=" type"
                converter="cdc.datamodel.converters.DummyConverter" name=" type">
                <empty-values/>
                <params/>
            </column>
            <column column=" x"
                converter="cdc.datamodel.converters.DummyConverter" name=" x">
                <empty-values/>
                <params/>
            </column>
            <column column=" y"
                converter="cdc.datamodel.converters.DummyConverter" name=" y">
                <empty-values/>
                <params/>
            </column>
            <column column=" score"
                converter="cdc.datamodel.converters.DummyConverter" name=" score">
                <empty-values/>
                <params/>
            </column>
            <column column=" shotdistance "
                converter="cdc.datamodel.converters.DummyConverter" name=" shotdistance ">
                <empty-values/>
                <params/>
            </column>
        </row-model>
    </right-data-source>
    <join class="cdc.impl.join.blocking.BlockingJoin"
        summary-left="true" summary-right="true">
        <params>
            <param name="blocking-function" value="equality"/>
            <param name="blocking-param" value="0"/>
        </params>
        <join-condition class="cdc.impl.conditions.WeightedJoinCondition">
            <params>
                <param name="acceptance-level" value="70"/>
            </params>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" quarter" right-column=" quarter" weight="3">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.NumericDistance"
                left-column=" time" right-column=" time" weight="45">
                <params>
                    <param name="use-lineral-approximation" value="true"/>
                    <param name="numeric-difference" value="1.0,1.0"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" team" right-column=" team" weight="8">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" eventtype" right-column=" eventtype" weight="8">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.EditDistance"
                left-column="assist_last" right-column=" assist" weight="3">
                <params>
                    <param name="match-level-start" value="0.2"/>
                    <param name="math-level-end" value="0.4"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EditDistance"
                left-column="awayjumpball_last"
                right-column=" awayjumpball" weight="3">
                <params>
                    <param name="match-level-start" value="0.2"/>
                    <param name="math-level-end" value="0.4"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column="entered_last" right-column=" entered" weight="3">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.EditDistance"
                left-column="homejumpball_last"
                right-column=" homejumpball" weight="3">
                <params>
                    <param name="match-level-start" value="0.2"/>
                    <param name="math-level-end" value="0.4"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EditDistance"
                left-column="left_1" right-column=" left" weight="3">
                <params>
                    <param name="match-level-start" value="0.2"/>
                    <param name="math-level-end" value="0.4"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" numfreeshot" right-column=" numfreeshot" weight="3">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" outof" right-column=" outof" weight="3">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.EditDistance"
                left-column="player_last" right-column=" player" weight="3">
                <params>
                    <param name="match-level-start" value="0.2"/>
                    <param name="math-level-end" value="0.4"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" points" right-column=" points" weight="3">
                <params/>
            </condition>
            <condition class="cdc.impl.distance.QGramDistance"
                left-column=" reason" right-column=" reason" weight="3">
                <params>
                    <param name="disapprove-level" value="0.4"/>
                    <param name="q" value="3"/>
                    <param name="approve-level" value="0.2"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.QGramDistance"
                left-column=" result" right-column=" result" weight="3">
                <params>
                    <param name="disapprove-level" value="0.4"/>
                    <param name="q" value="3"/>
                    <param name="approve-level" value="0.2"/>
                </params>
            </condition>
            <condition class="cdc.impl.distance.EqualFieldsDistance"
                left-column=" score" right-column=" score" weight="3">
                <params/>
            </condition>
        </join-condition>
        <row-model>
            <column name=" quarter" source="NBA"/>
            <column name=" quarter" source="br"/>
            <column name=" time" source="br"/>
            <column name=" time" source="NBA"/>
            <column name=" team" source="br"/>
            <column name=" team" source="NBA"/>
            <column name=" eventtype" source="br"/>
            <column name=" eventtype" source="NBA"/>
            <column name=" block" source="br"/>
            <column name=" block" source="NBA"/>
            <column name=" left" source="br"/>
            <column name=" numfreeshot" source="br"/>
            <column name=" numfreeshot" source="NBA"/>
            <column name=" opponent" source="br"/>
            <column name=" opponent" source="NBA"/>
            <column name=" outof" source="br"/>
            <column name=" outof" source="NBA"/>
            <column name=" points" source="br"/>
            <column name=" points" source="NBA"/>
            <column name=" possession" source="br"/>
            <column name=" possession" source="NBA"/>
            <column name=" reason" source="br"/>
            <column name=" reason" source="NBA"/>
            <column name=" result" source="br"/>
            <column name=" result" source="NBA"/>
            <column name=" steal" source="br"/>
            <column name=" steal" source="NBA"/>
            <column name=" type" source="br"/>
            <column name=" type" source="NBA"/>
            <column name=" x" source="br"/>
            <column name=" x" source="NBA"/>
            <column name=" y" source="br"/>
            <column name=" y" source="NBA"/>
            <column name=" score" source="br"/>
            <column name=" score" source="NBA"/>
            <column name=" shotdistance" source="br"/>
            <column name=" shotdistance " source="NBA"/>
            <column name="assist_first" source="br"/>
            <column name="assist_last" source="br"/>
            <column name=" assist" source="NBA"/>
            <column name="awayjumpball_first" source="br"/>
            <column name="awayjumpball_last" source="br"/>
            <column name=" awayjumpball" source="NBA"/>
            <column name="homejumpball_first" source="br"/>
            <column name="homejumpball_last" source="br"/>
            <column name=" homejumpball" source="NBA"/>
            <column name="entered_first" source="br"/>
            <column name="entered_last" source="br"/>
            <column name=" entered" source="NBA"/>
            <column name="left_0" source="br"/>
            <column name="left_1" source="br"/>
            <column name=" left" source="NBA"/>
            <column name="player_first" source="br"/>
            <column name="player_last" source="br"/>
            <column name=" player" source="NBA"/>
        </row-model>
    </join>
    <results-savers>
        <results-saver class="cdc.impl.resultsavers.DeduplicatingResultsSaver">
            <params>
                <param name="deduplication" value="both"/>
                <param name="delete-duplicates" value="ask"/>
            </params>
            <savers>
                <results-saver class="cdc.impl.resultsavers.CSVFileSaver">
                    <params>
                        <param name="encoding" value="UTF-8"/>
                        <param name="output-file" value="/Users/mirzasikander/Documents/courses/CS548-IIW/Project/code/linked-data/results.csv"/>
                    </params>
                </results-saver>
            </savers>
        </results-saver>
    </results-savers>
</configuration>
